var o=63710088e-1,f={centimeters:o*100,centimetres:o*100,degrees:360/(2*Math.PI),feet:o*3.28084,inches:o*39.37,kilometers:o/1e3,kilometres:o/1e3,meters:o,metres:o,miles:o/1609.344,millimeters:o*1e3,millimetres:o*1e3,nauticalmiles:o/1852,radians:1,yards:o*1.0936},m={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,nauticalmiles:29155334959812285e-23,millimeters:1e6,millimetres:1e6,yards:1.195990046};function s(r,e,t={}){const n={type:"Feature"};return(t.id===0||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=e||{},n.geometry=r,n}function P(r,e,t={}){switch(r){case"Point":return c(e).geometry;case"LineString":return h(e).geometry;case"Polygon":return g(e).geometry;case"MultiPoint":return b(e).geometry;case"MultiLineString":return y(e).geometry;case"MultiPolygon":return d(e).geometry;default:throw new Error(r+" is invalid")}}function c(r,e,t={}){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!a(r[0])||!a(r[1]))throw new Error("coordinates must contain numbers");return s({type:"Point",coordinates:r},e,t)}function p(r,e,t={}){return l(r.map(n=>c(n,e)),t)}function g(r,e,t={}){for(const i of r){if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");if(i[i.length-1].length!==i[0].length)throw new Error("First and last Position are not equivalent.");for(let u=0;u<i[i.length-1].length;u++)if(i[i.length-1][u]!==i[0][u])throw new Error("First and last Position are not equivalent.")}return s({type:"Polygon",coordinates:r},e,t)}function A(r,e,t={}){return l(r.map(n=>g(n,e)),t)}function h(r,e,t={}){if(r.length<2)throw new Error("coordinates must be an array of two or more positions");return s({type:"LineString",coordinates:r},e,t)}function M(r,e,t={}){return l(r.map(n=>h(n,e)),t)}function l(r,e={}){const t={type:"FeatureCollection"};return e.id&&(t.id=e.id),e.bbox&&(t.bbox=e.bbox),t.features=r,t}function y(r,e,t={}){return s({type:"MultiLineString",coordinates:r},e,t)}function b(r,e,t={}){return s({type:"MultiPoint",coordinates:r},e,t)}function d(r,e,t={}){return s({type:"MultiPolygon",coordinates:r},e,t)}function k(r,e,t={}){return s({type:"GeometryCollection",geometries:r},e,t)}function x(r,e=0){if(e&&!(e>=0))throw new Error("precision must be a positive number");const t=Math.pow(10,e||0);return Math.round(r*t)/t}function E(r,e="kilometers"){const t=f[e];if(!t)throw new Error(e+" units is invalid");return r*t}function w(r,e="kilometers"){const t=f[e];if(!t)throw new Error(e+" units is invalid");return r/t}function L(r,e){return v(w(r,e))}function F(r){let e=r%360;return e<0&&(e+=360),e}function S(r){return r=r%360,r>180?r-360:r<-180?r+360:r}function v(r){return r%(2*Math.PI)*180/Math.PI}function T(r){return r%360*Math.PI/180}function R(r,e="kilometers",t="kilometers"){if(!(r>=0))throw new Error("length must be a positive number");return E(w(r,e),t)}function q(r,e="meters",t="kilometers"){if(!(r>=0))throw new Error("area must be a positive number");const n=m[e];if(!n)throw new Error("invalid original units");const i=m[t];if(!i)throw new Error("invalid final units");return r/n*i}function a(r){return!isNaN(r)&&r!==null&&!Array.isArray(r)}function I(r){return r!==null&&typeof r=="object"&&!Array.isArray(r)}function C(r){if(!r)throw new Error("bbox is required");if(!Array.isArray(r))throw new Error("bbox must be an Array");if(r.length!==4&&r.length!==6)throw new Error("bbox must be an Array of 4 or 6 numbers");r.forEach(e=>{if(!a(e))throw new Error("bbox must only contain numbers")})}function D(r){if(!r)throw new Error("id is required");if(["string","number"].indexOf(typeof r)===-1)throw new Error("id must be a number or a string")}export{m as areaFactors,S as azimuthToBearing,F as bearingToAzimuth,q as convertArea,R as convertLength,T as degreesToRadians,o as earthRadius,f as factors,s as feature,l as featureCollection,P as geometry,k as geometryCollection,a as isNumber,I as isObject,L as lengthToDegrees,w as lengthToRadians,h as lineString,M as lineStrings,y as multiLineString,b as multiPoint,d as multiPolygon,c as point,p as points,g as polygon,A as polygons,v as radiansToDegrees,E as radiansToLength,x as round,C as validateBBox,D as validateId};
